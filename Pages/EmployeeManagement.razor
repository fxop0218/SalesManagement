@page "/EmployeeManagement"
@using SalesManagment.Models;
@using SalesManagment.Services.Contracts;
@using Syncfusion.Blazor.Grids
@using SalesManagment.Entities;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner;

@inject IEmployeeManagementService EmployeeManagementService;
<h3>EmployeeManagment</h3>
 <!--Grid with all the employee information -->
<div style="max-width:900px">
    <SfGrid DataSource="employeeData">
        <GridColumns>
            <GridEditSettings AllowEditing="true"></GridEditSettings>
            <GridColumn Field="@nameof(EmployeeModel.Id)" HeaderText="Id" IsPrimaryKey="true" Width="40px"/>
            <GridColumn HeaderText="Image Profile" Width="130px">
                <Template>
                    @{
                        var employee = (context as EmployeeModel);
                        <div class="profile-image-container">
                            <img src="@(employee?.ImagePath)">
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeModel.FirstName)" HeaderText="Name"/>
            <GridColumn Field="@nameof(EmployeeModel.Surname)" HeaderText="Surname"/>
            <GridForeignColumn HeaderText="Designation"
                    TValue="EmployeeJobTitle"
                    Field="@nameof(EmployeeModel.EmployeeTitleId)"
                    ForeignDataSource="employeeTitleData"
                    ForeignKeyValue="Name" Width="100px">
                <EditTemplate>
                    <SfDropDownList @bind-value = "@((context as EmployeeModel).EmployeeTitleId)"
                        ID = "EmployeeTitleId"
                        DataSource="employeeTitleData"
                        TItem = "EmployeeJobTitle"
                        TValue="int">
                    <DropDownListFieldSettings Text="Name" Value="EmployeeTitleId">

                    </DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>

            </GridForeignColumn>
            <GridColumn Field="@nameof(EmployeeModel.Gender)" HeaderText="Gender">
                <EditTemplate>
                    <SfDropDownList DataSource="genderCollection"
                        TItem="string"
                        TValue="string"
                        @bind-Value = "((context as EmployeeModel).Gender)">

                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridForeignColumn HeaderText="Reports To"
                    TValue="ReportToModel"
                    Field="@nameof(EmployeeModel.ReportToEmpId)"
                    ForeignDataSource="reportToEmployeeData"
                    ForeignKeyValue="ReportToName" Width="130px">
                <EditTemplate>
                    <SfDropDownList @bind-value = "@((context as EmployeeModel).ReportToEmpId)"
                        ID = "ReportToEmpId"
                        DataSource="reportToEmployeeData"
                        TItem="ReportToModel"
                        TValue="Nullable<int>">
                        <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
                        </DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>

            </GridForeignColumn>
            <GridColumn Field="@nameof(EmployeeModel.DateOfBirth)" HeaderText="Birth" Width="100px" Format="d"/>
        </GridColumns>
        <SfSpinner @bind-Visible = "@VisibleProp"></SfSpinner>
    </SfGrid>
</div>
<style>
    .profile-image-container{
        width: 80px;
        height: 80px;
    }

    .profile-image-container img{
        height: 100%;
        width: 100%;
        border-radius: 20px;
    }
</style>
@code {

    private bool VisibleProp { get; set; }
    // Set all the genders
    private enum GenderVal
    {
        Male,
        Famale, 
        Other
    }

    // Transform GenderVal into array
    private string[] genderCollection = Enum.GetNames(typeof(GenderVal));
    private List<EmployeeModel>? employeeData = null;
    private List<EmployeeJobTitle>? employeeTitleData;
    private List<ReportToModel>? reportToEmployeeData;
    // private List<object> toolbar = new List<object> { "Add", "Update", "Cancel", "Edit", "Delete" ,"Search" }; // Search bar in the grid 

    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true; 
        employeeData = await EmployeeManagementService.GetEmployees();
        employeeTitleData = await EmployeeManagementService.GetEmployeeJobTitle();
        reportToEmployeeData = await EmployeeManagementService.GetEmployeeReportTo();

        await Task.Delay(2500);
        VisibleProp = false;
    }
}
