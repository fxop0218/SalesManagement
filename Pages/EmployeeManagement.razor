@page "/EmployeeManagement"
@using SalesManagment.Models;
@using SalesManagment.Services.Contracts;
@using Syncfusion.Blazor.Grids
@using SalesManagment.Entities;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations.Internal;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Buttons;

@inject IEmployeeManagementService EmployeeManagementService;
<h3>EmployeeManagment</h3>
 <!--Grid with all the employee information -->
<div style="max-width:1200px">
    <!--Toolbar with the acctions-->
    <SfGrid @ref="SfEmployeeGrid" DataSource="employeeData" Toolbar="@toolbar" AllowSorting="true" AllowExcelExport="true" AllowPdfExport="true"> 
        <GridColumns>
            <GridEditSettings AllowEditing="true" 
                                AllowAdding="true" 
                                AllowDeleting="true"
                                AllowEditOnDblClick="true"
                                Mode="EditMode.Batch"> <!-- Mode = "EditMode.Dialog" to set edit into a dialog  -->

                <!-- Create a template of the alert dialog header -->
                <HeaderTemplate>
                    <span>@(GetHeaderText(context as EmployeeModel))</span>
                </HeaderTemplate>
                 
                <!-- Create the buttons of the dialog footer -->
                <FooterTemplate>
                    <!-- Save the changes -->
                    <SfButton OnClick="@Save" IsPrimary="true">@DialogButtonCaption</SfButton> 
                    <!-- Cancel the edit and colose the dialog -->
                    <SfButton OnClick="@Cancel" IsPrimary="true">Cancel</SfButton> 
                </FooterTemplate>
            </GridEditSettings> <!--Allow to edit, delete, and create new fields-->

            <GridColumn Field="@nameof(EmployeeModel.Id)" 
                                HeaderText="Id" IsPrimaryKey="true" Width="40px"
                                AllowAdding="false"/> <!-- This field can't be edited-->

            <GridEvents OnActionBegin="ActionBeginHandler" 
                        OnActionComplete="ActionCompletedHandler"
                        OnToolbarClick="ActionDownloadExcel"
                        CommandClicked="OnCommandClicked"
                        OnBatchSave = "OnBatchUpdate"
                        TValue="EmployeeModel"></GridEvents> <!-- Event listener -->

            <GridColumn HeaderText="Image Profile" AllowAdding="false" AllowEditing="false" Width="130px">
                <Template>
                    @{
                        var employee = (context as EmployeeModel);
                            <div class="profile-image-container">
                                <img src="@(employee?.ImagePath)">
                            </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeModel.FirstName)" HeaderText="Name" Width="100px"/>
            <GridColumn Field="@nameof(EmployeeModel.Surname)" HeaderText="Surname" Width="100px"/>
            <GridForeignColumn HeaderText="Designation"
                    TValue="EmployeeJobTitle"
                    Field="@nameof(EmployeeModel.EmployeeTitleId)"
                    ForeignDataSource="employeeTitleData"
                    ForeignKeyValue="Name" Width="100px">
                <EditTemplate>
                    <SfDropDownList @bind-value = "@((context as EmployeeModel).EmployeeTitleId)"
                        ID = "EmployeeTitleId"
                        DataSource="employeeTitleData"
                        TItem = "EmployeeJobTitle"
                        TValue="int">
                    <DropDownListFieldSettings Text="Name" Value="EmployeeTitleId">

                    </DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>

            </GridForeignColumn>
            <GridColumn Field="@nameof(EmployeeModel.Email)" Width="180px"></GridColumn>
            <GridColumn Field="@nameof(EmployeeModel.DateOfBirth)" HeaderText="Birth" Width="100px" Format="d"/>
            <GridForeignColumn HeaderText="Reports To"
                    TValue="ReportToModel"
                    Field="@nameof(EmployeeModel.ReportToEmpId)"
                    ForeignDataSource="reportToEmployeeData"
                    ForeignKeyValue="ReportToName" Width="130px">
                <EditTemplate>
                    <SfDropDownList @bind-value = "@((context as EmployeeModel).ReportToEmpId)"
                        ID = "ReportToEmpId"
                        DataSource="reportToEmployeeData"
                        TItem="ReportToModel"
                        TValue="Nullable<int>">
                        <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
                        </DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>

            </GridForeignColumn>
            <GridColumn Field="@nameof(EmployeeModel.Gender)" HeaderText="Gender" Width="100px">
                <EditTemplate>
                    <SfDropDownList DataSource="genderCollection"
                        TItem="string"
                        TValue="string"
                        @bind-Value = "((context as EmployeeModel).Gender)">

                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn HeaderText="Operatioins">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {
                                            IconCss = "e-icons e-delete",
                                            CssClass = "e-flat"
                                        })">
                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {
                                            IconCss = "e-icons e-edit",
                                            CssClass = "e-flat"
                                        })">
                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {
                                            IconCss = "e-icons e-cancel-icon",
                                            CssClass = "e-flat"
                                        })">
                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {
                                            IconCss = "e-icons e-save",
                                            CssClass = "e-flat"
                                        })">
                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
             <!--
            <GridColumn HeaderText="Custion operations" Width="110px">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit"
                                                ButtonOption="@(new CommandButtonOptions() {
                                                                        Content = "O1",
                                                                        CssClass = "e-outline",
                                                                })">
                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Edit"
                                                ButtonOption="@(new CommandButtonOptions() {
                                                                        Content = "O2",
                                                                        CssClass = "e-outline",
                                                                })">
                    </GridCommandColumn>    
                </GridCommandColumns>
            </GridColumn>
             -->
        </GridColumns>
        <SfSpinner @bind-Visible = "@VisibleProp"></SfSpinner>
    </SfGrid>
</div>
<style>
    .profile-image-container{
        width: 80px;
        height: 80px;
    }

    .profile-image-container img{
        height: 100%;
        width: 100%;
        border-radius: 20px;
    }
</style>
@code {

    private bool VisibleProp { get; set; }
    // Set all the genders
    private enum GenderVal
    {
        Male,
        Famale,
        Other
    }

    // Transform GenderVal into array
    private SfGrid<EmployeeModel>? SfEmployeeGrid { get; set; }
    private string DialogButtonCaption { get; set; }
    private string[] genderCollection = Enum.GetNames(typeof(GenderVal));
    private List<EmployeeModel>? employeeData = null;
    private List<EmployeeJobTitle>? employeeTitleData;
    private List<ReportToModel>? reportToEmployeeData;
    private List<object> toolbar = new List<object> { "Add", "Search", "Update", "Cancel", "ExcelExport", "PdfExport",
                                                      new ItemModel() { Text = "CSV export", TooltipText = "Export data to a CSV format",
                                                                        PrefixIcon = "e-click", Id = "CSVExport"} }; // Search bar in the grid 


    private string GetHeaderText(EmployeeModel employeeMod)
    {
        if (employeeMod.Id == 0)
        {
            DialogButtonCaption = "Add";
            return "Add Employee";
        } else
        {
            DialogButtonCaption = "Update";
            return $"Edit: {employeeMod.FirstName} {employeeMod.Surname} with id {employeeMod.Id}";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true;
        employeeData = await EmployeeManagementService.GetEmployees();
        employeeTitleData = await EmployeeManagementService.GetEmployeeJobTitle();
        reportToEmployeeData = await EmployeeManagementService.GetEmployeeReportTo();

        await Task.Delay(1500);
        VisibleProp = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<EmployeeModel> arguments)
    {
        if (arguments.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (arguments.Action == "Add")
            {
                await EmployeeManagementService.AddEmployee(arguments.Data);
            }
            else if (arguments.Action == "Edit")
            {
                await EmployeeManagementService.UpdateEmployee(arguments.Data);
            }
        }
        else if (arguments.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            if (arguments.Action == "Delete")
            {
                await EmployeeManagementService.DeleteEmployee(arguments.Data.Id);
            }
        }
    }

    public async void ActionCompletedHandler(ActionEventArgs<EmployeeModel> arguments)
    {
        if (arguments.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (arguments.Action == "Add")
            {
                employeeData = await EmployeeManagementService.GetEmployees();
                SfEmployeeGrid?.Refresh();
            }
        }
    }

    public async void ActionDownloadExcel(Syncfusion.Blazor.Navigations.ClickEventArgs arguments)
    {
        if (arguments.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid?.ExportToExcelAsync();
        }
        else if (arguments.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid?.ExportToPdfAsync();
        }
        else if (arguments.Item.Id.Contains("CSVExport"))
        {
            await SfEmployeeGrid?.ExportToCsvAsync();    
        }
    }

    public async void OnCommandClicked(CommandClickEventArgs<EmployeeModel> arguments)
    {
        if (arguments.CommandColumn.ButtonOption.Content == "O1")
        {

        }  else if (arguments.CommandColumn.ButtonOption.Content == "O2")
        {

        }
    }

    private async Task Cancel()
    {
        await SfEmployeeGrid.CloseEditAsync();
    }

    private async Task Save()
    {
        await SfEmployeeGrid.EndEditAsync();
    }
    // Only works if don't show the dialog.
    private async Task OnBatchUpdate(BeforeBatchSaveArgs<EmployeeModel> arguments)
    {
        var addedRecords = arguments.BatchChanges.AddedRecords;
        var updateRecords = arguments.BatchChanges.ChangedRecords;
        var deleteRecords = arguments.BatchChanges.DeletedRecords;

        foreach(EmployeeModel emp in addedRecords)
        {
            await EmployeeManagementService.AddEmployee(emp);
        } 
        foreach (EmployeeModel emp in deleteRecords)
        {
            await EmployeeManagementService.DeleteEmployee(emp.Id);
        }
        foreach (EmployeeModel emp in updateRecords)
        {
            await EmployeeManagementService.UpdateEmployee(emp);
        }
    }
}
